name: Run Jest Tests
run-name: Run Jest Tests
on: # this only runs when a pull request is created or synchronized.
  pull_request:
    branches:
      - sit
      - feature/init-jest-scheduling
jobs:
  run-jest-tests:
    runs-on: ubuntu-latest
    steps:
      # Checkout the source. Note we're also setting the safe directory here.
      - name: 'Checkout source code'
        uses: actions/checkout@v4
      # Install dependencies
      - name: 'Install dependencies'
        run: npm install
      - name: 'Unit test Lightning Web Components'
        id: unit-test-lwc
        continue-on-error: true
        run: |
          npm run test:lwc:ci
      - name: 'Post comment about failing Jest Tests'
        if: steps.unit-test-lwc.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          message: "Jest Tests failed. However, we're allowing the build to continue at this time because our Jest Tests are not-yet-mature enough to be authoritative. Please review the failing tests."
      - name: Generate Coverage Table
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const jsonFile = 'coverage/coverage-summary.json';
            const jsonData = JSON.parse(fs.readFileSync(jsonFile, 'utf8'));
            
            const getBadgeColor = (value) => {
              if (value < 75) {
                return 'red';
              } else if (value >= 75.1 && value <= 85) {
                return 'orange';
              } else {
                return 'green';
              }
            };
            
            let table = '| File | Lines | Functions | Statements | Branches |\n';
            table += '|------|-------|-----------|------------|----------|\n';
            
            // Generate table rows for each file
            Object.entries(jsonData).forEach(([file, data]) => {
              if (file !== 'total') {
                const filename = file.split('/').pop();
                const lines = data.lines.pct;
                const functions = data.functions.pct;
                const statements = data.statements.pct;
                const branches = data.branches.pct;
            
                const linesColor = getBadgeColor(lines);
                const functionsColor = getBadgeColor(functions);
                const statementsColor = getBadgeColor(statements);
                const branchesColor = getBadgeColor(branches);
            
                table += `| ${filename} | ![Lines](https://img.shields.io/badge/Lines-${lines}%25-${linesColor}) | ![Functions](https://img.shields.io/badge/Functions-${functions}%25-${functionsColor}) | ![Statements](https://img.shields.io/badge/Statements-${statements}%25-${statementsColor}) | ![Branches](https://img.shields.io/badge/Branches-${branches}%25-${branchesColor}) |\n`;
              }
            });
            
            // Generate table row for total
            const totalLines = jsonData.total.lines.pct;
            const totalFunctions = jsonData.total.functions.pct;
            const totalStatements = jsonData.total.statements.pct;
            const totalBranches = jsonData.total.branches.pct;
            
            const totalLinesColor = getBadgeColor(totalLines);
            const totalFunctionsColor = getBadgeColor(totalFunctions);
            const totalStatementsColor = getBadgeColor(totalStatements);
            const totalBranchesColor = getBadgeColor(totalBranches);
            const commentIdentifier = '<!-- coverage-table-comment -->';
            
            let summaryTable = '| File | Lines | Functions | Statements | Branches |\n';
            summaryTable += '|------|-------|-----------|------------|----------|\n';
            summaryTable += `| **TOTALS** | ![Total Lines](https://img.shields.io/badge/Total%20Lines-${totalLines}%25-${totalLinesColor}) | ![Total Functions](https://img.shields.io/badge/Total%20Functions-${totalFunctions}%25-${totalFunctionsColor}) | ![Total Statements](https://img.shields.io/badge/Total%20Statements-${totalStatements}%25-${totalStatementsColor}) | ![Total Branches](https://img.shields.io/badge/Total%20Branches-${totalBranches}%25-${totalBranchesColor}) |\n`;
            
            commentBodyWithSummary = `${commentIdentifier}\n## Jest Test Coverage Table\n\n${summaryTable}\n<details>\n<summary>Details</summary>\n\n${table}\n</details>`;
            
            // Create or update the comment
            const issueNumber = context.issue.number;
            
            // Check if a comment with the identifier already exists
            const existingComment = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
            });
            
            const commentWithIdentifier = existingComment.data.find(comment => comment.body.startsWith(commentIdentifier));
            
            if (commentWithIdentifier) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentWithIdentifier.id,
                body: commentBodyWithSummary,
              });
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBodyWithSummary,
              });
            }